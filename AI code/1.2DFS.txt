class Stack:
    def __init__(self):
        self.list = []

    def push(self, item):
        """Push 'item' onto the stack."""
        self.list.append(item)

    def pop(self):
        """Pop the most recently pushed item from the stack."""
        return self.list.pop()

    def top(self):
        """Return the last element."""
        return self.list[-1]

    def is_empty(self):
        """Returns true if the stack is empty."""
        return len(self.list) == 0


def depth_first_search(graph, start):
    stack = Stack()
    stack.push(start)
    path = []

    while not stack.is_empty():
        vertex = stack.pop()
        if vertex in path:
            continue
        path.append(vertex)

        if vertex not in graph:  # check if vertex is in the graph dictionary
            continue

        for neighbor in graph[vertex]:
            stack.push(neighbor)

    return path


def main():
    adjacency_matrix = {}

    # take user input for nodes and their neighbors
    while True:
        node = int(input("Enter node value (or -1 to stop): "))
        if node == -1:
            break
        neighbors = list(map(int, input("Enter neighbors (separated by space): ").split()))
        adjacency_matrix[node] = neighbors

    # perform DFS on the adjacency matrix
    start_node = int(input("Enter starting node: "))
    dfs_path = depth_first_search(adjacency_matrix, start_node)
    print(dfs_path)


if __name__ == '__main__':
    main()
